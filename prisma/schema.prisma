// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Profile {
  bio String
}

model User {
  v             Int       @default(0) @map("__v") @ignore
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  role          String
  profile       Profile?
  password      String?
  address       String?

  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
  donations     Donation[]
  participants Donee[]

  @@map("users")
}

// model Profile {
//   v      Int    @default(0) @map("__v") @ignore
//   id     String @id @default(auto()) @map("_id") @db.ObjectId
//   bio    String
//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique @db.ObjectId

// }

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Donation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ownerId     String   @db.ObjectId
  title       String
  description String?
  img         String
  quantity    Int
  due         DateTime
  doneeId String  @db.ObjectId

  owner User @relation(fields: [ownerId], references: [id])
  participants Donee[]
}

model Donee {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  userId     String @db.ObjectId
  donationId String @db.ObjectId

  credibility Credibility @default(notAccredited)
  

  user     User     @relation(fields: [userId], references: [id])
  donation Donation @relation(fields: [donationId], references: [id])
}

enum Credibility {
  isAccredited
  notAccredited
}
// KYLE ADDITION
// ORGANIZATIONS SHOULD BE ACCREDITED BY PCNC SO THE ORGANIZATION MODEL SHOULD HAVE A TYPE description
// OF ACCREDITED OR NOT

// enum Role {
//   LGU 
//   ADMIN
//   DONATOR
//   DISTRIBUTOR
// }
