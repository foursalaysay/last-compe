// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Profile {
  bio String
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  createdAt      DateTime?       @default(now())
  updatedAt      DateTime?       @updatedAt
  role           String
  profile        Profile?
  password       String?
  address        String?
  description    String?
  mobileNumber   String?
  donations      Donation[]
  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
  Particpant     Particpant[]
  preferredFoods PreferredFood[]

  @@map("users")
}

model PreferredFood {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  text   String?
  User   User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Donation {
  id                         String       @id @default(auto()) @map("_id") @db.ObjectId
  donorId                    String       @db.ObjectId
  donor                      User?        @relation(fields: [donorId], references: [id])
  recipientId                String       @db.ObjectId
  donationDate               DateTime?    @default(now())
  updatedAt                  DateTime?    @updatedAt
  description                String?
  donorStatus                String?
  recipientStatus            String?
  donationType               String?
  donationValue              Float?
  donationDetails            String?
  pickupAddress              String?
  notificationStatus         Boolean      @default(false)
  cancellationReason         String?
  completionDate             DateTime?    @default(now())
  donorContactInfo           String?
  recipientContactInfo       String?
  donationPickupInstructions String?
  donorFeedback              String?
  recipientFeedback          String?
  particpants                Particpant[]
}

model Particpant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  donationId String   @db.ObjectId
  donation   Donation @relation(fields: [donationId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}
